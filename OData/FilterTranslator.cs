//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FilterTranslator.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class FilterTranslator : Lexer {
	public const int
		OPERATOR=1, FUNCTION=2, UNSUPPORTEDFUNCTION=3, WS=4, STRING_LITERAL=5, 
		NUMBER=6, PROPERTY=7, TEXT=8;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPERATOR", "FUNCTION", "UNSUPPORTEDFUNCTION", "WS", "STRING_LITERAL", 
		"NUMBER", "PROPERTY", "TEXT"
	};


	    SqlServerRestApi.SQL.TableSpec tableSpec;
		SqlServerRestApi.SQL.QuerySpec querySpec;
		int i = 0;
		public FilterTranslator(ICharStream input,
								SqlServerRestApi.SQL.TableSpec tableSpec,
								SqlServerRestApi.SQL.QuerySpec querySpec): base(input) 
		{
			this.tableSpec = tableSpec;
			this.querySpec = querySpec;
			this.querySpec.columnFilter = new System.Collections.Hashtable();
			_interp = new LexerATNSimulator(this,_ATN);
		}


	public FilterTranslator(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'[a-zA-Z][a-zA-Z0-9\".\"]*('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPERATOR", "FUNCTION", "UNSUPPORTEDFUNCTION", "WS", "STRING_LITERAL", 
		"NUMBER", "PROPERTY", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FilterTranslator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 0 : OPERATOR_action(_localctx, actionIndex); break;

		case 1 : FUNCTION_action(_localctx, actionIndex); break;

		case 2 : UNSUPPORTEDFUNCTION_action(_localctx, actionIndex); break;

		case 4 : STRING_LITERAL_action(_localctx, actionIndex); break;

		case 6 : PROPERTY_action(_localctx, actionIndex); break;
		}
	}
	private void OPERATOR_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  Text = "=";  break;

		case 1:  Text = "<>";  break;

		case 2:  Text = ">";  break;

		case 3:  Text = ">=";  break;

		case 4:  Text = "<";  break;

		case 5:  Text = "<=";  break;

		case 6:  Text = "+";  break;

		case 7:  Text = "-";  break;

		case 8:  Text = "*";  break;

		case 9:  Text = "/";  break;

		case 10:  Text = "%";  break;
		}
	}
	private void FUNCTION_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 11:  Text = "odata.contains(";  break;

		case 12:  Text = "odata.endswith(";  break;

		case 13:  Text = "odata.indexof(";  break;

		case 14:  Text = "len(";  break;

		case 15:  Text = "odata.startswith(";  break;

		case 16:  Text = "lower(";  break;

		case 17:  Text = "lower(";  break;

		case 18:  Text = "datepart(year,";  break;

		case 19:  Text = "datepart(month,";  break;

		case 20:  Text = "datepart(day,";  break;

		case 21:  Text = "datepart(hour,";  break;

		case 22:  Text = "datepart(minute,";  break;

		case 23:  Text = "datepart(second,";  break;
		}
	}
	private void UNSUPPORTEDFUNCTION_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 24: throw new System.ArgumentException("Unsupported function: " + Text); break;
		}
	}
	private void STRING_LITERAL_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 25:  this.querySpec.columnFilter.Add("@p"+i, Text.Substring(1,Text.Length-2)); Text = "@p"+(i++);  break;
		}
	}
	private void PROPERTY_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 26:  this.tableSpec.HasColumn(Text); break;
		}
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\n\xFE\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x45\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xBC\n\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x5\x6\x5\xDA\n\x5\r\x5\xE\x5\xDB\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\a\x6\xE2\n\x6\f\x6\xE\x6\xE5\v\x6\x3\x6\x3\x6\x3\x6\x3\a"+
		"\x3\a\a\a\xEC\n\a\f\a\xE\a\xEF\v\a\x3\b\x3\b\a\b\xF3\n\b\f\b\xE\b\xF6"+
		"\v\b\x3\b\x3\b\x3\t\x6\t\xFB\n\t\r\t\xE\t\xFC\x3\xE3\x2\x2\n\x3\x2\x3"+
		"\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x3\x2\t\x5\x2"+
		"\v\f\xF\xF\"\"\x3\x2))\x3\x2\x33;\x3\x2\x32;\x4\x2\x43\\\x63|\x5\x2\x32"+
		";\x43\\\x63|\x5\x2$$*+\x30\x30\x118\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2"+
		"\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2"+
		"\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x3\x44\x3\x2\x2\x2\x5\xBB\x3\x2\x2"+
		"\x2\a\xBD\x3\x2\x2\x2\t\xD9\x3\x2\x2\x2\v\xDF\x3\x2\x2\x2\r\xE9\x3\x2"+
		"\x2\x2\xF\xF0\x3\x2\x2\x2\x11\xFA\x3\x2\x2\x2\x13\x14\ag\x2\x2\x14\x15"+
		"\as\x2\x2\x15\x16\x3\x2\x2\x2\x16\x45\b\x2\x2\x2\x17\x18\ap\x2\x2\x18"+
		"\x19\ag\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x45\b\x2\x3\x2\x1B\x1C\ai\x2\x2"+
		"\x1C\x1D\av\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x45\b\x2\x4\x2\x1F \ai\x2\x2"+
		" !\ag\x2\x2!\"\x3\x2\x2\x2\"\x45\b\x2\x5\x2#$\an\x2\x2$%\av\x2\x2%&\x3"+
		"\x2\x2\x2&\x45\b\x2\x6\x2\'(\an\x2\x2()\ag\x2\x2)*\x3\x2\x2\x2*\x45\b"+
		"\x2\a\x2+,\a\x63\x2\x2,-\a\x66\x2\x2-.\a\x66\x2\x2./\x3\x2\x2\x2/\x45"+
		"\b\x2\b\x2\x30\x31\au\x2\x2\x31\x32\aw\x2\x2\x32\x33\a\x64\x2\x2\x33\x34"+
		"\x3\x2\x2\x2\x34\x45\b\x2\t\x2\x35\x36\ao\x2\x2\x36\x37\aw\x2\x2\x37\x38"+
		"\an\x2\x2\x38\x39\x3\x2\x2\x2\x39\x45\b\x2\n\x2:;\a\x66\x2\x2;<\ak\x2"+
		"\x2<=\ax\x2\x2=>\x3\x2\x2\x2>\x45\b\x2\v\x2?@\ao\x2\x2@\x41\aq\x2\x2\x41"+
		"\x42\a\x66\x2\x2\x42\x43\x3\x2\x2\x2\x43\x45\b\x2\f\x2\x44\x13\x3\x2\x2"+
		"\x2\x44\x17\x3\x2\x2\x2\x44\x1B\x3\x2\x2\x2\x44\x1F\x3\x2\x2\x2\x44#\x3"+
		"\x2\x2\x2\x44\'\x3\x2\x2\x2\x44+\x3\x2\x2\x2\x44\x30\x3\x2\x2\x2\x44\x35"+
		"\x3\x2\x2\x2\x44:\x3\x2\x2\x2\x44?\x3\x2\x2\x2\x45\x4\x3\x2\x2\x2\x46"+
		"G\a\x65\x2\x2GH\aq\x2\x2HI\ap\x2\x2IJ\av\x2\x2JK\a\x63\x2\x2KL\ak\x2\x2"+
		"LM\ap\x2\x2MN\au\x2\x2NO\a*\x2\x2OP\x3\x2\x2\x2P\xBC\b\x3\r\x2QR\ag\x2"+
		"\x2RS\ap\x2\x2ST\a\x66\x2\x2TU\au\x2\x2UV\ay\x2\x2VW\ak\x2\x2WX\av\x2"+
		"\x2XY\aj\x2\x2YZ\x3\x2\x2\x2Z\xBC\b\x3\xE\x2[\\\ak\x2\x2\\]\ap\x2\x2]"+
		"^\a\x66\x2\x2^_\ag\x2\x2_`\az\x2\x2`\x61\aq\x2\x2\x61\x62\ah\x2\x2\x62"+
		"\x63\x3\x2\x2\x2\x63\xBC\b\x3\xF\x2\x64\x65\an\x2\x2\x65\x66\ag\x2\x2"+
		"\x66g\ap\x2\x2gh\ai\x2\x2hi\av\x2\x2ij\aj\x2\x2jk\a*\x2\x2kl\x3\x2\x2"+
		"\x2l\xBC\b\x3\x10\x2mn\au\x2\x2no\av\x2\x2op\a\x63\x2\x2pq\at\x2\x2qr"+
		"\av\x2\x2rs\au\x2\x2st\ay\x2\x2tu\ak\x2\x2uv\av\x2\x2vw\aj\x2\x2wx\a*"+
		"\x2\x2xy\x3\x2\x2\x2y\xBC\b\x3\x11\x2z{\av\x2\x2{|\aq\x2\x2|}\an\x2\x2"+
		"}~\aq\x2\x2~\x7F\ay\x2\x2\x7F\x80\ag\x2\x2\x80\x81\at\x2\x2\x81\x82\a"+
		"*\x2\x2\x82\x83\x3\x2\x2\x2\x83\xBC\b\x3\x12\x2\x84\x85\av\x2\x2\x85\x86"+
		"\aq\x2\x2\x86\x87\aw\x2\x2\x87\x88\ar\x2\x2\x88\x89\ag\x2\x2\x89\x8A\a"+
		"t\x2\x2\x8A\x8B\a*\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\xBC\b\x3\x13\x2\x8D\x8E"+
		"\a{\x2\x2\x8E\x8F\ag\x2\x2\x8F\x90\a\x63\x2\x2\x90\x91\at\x2\x2\x91\x92"+
		"\a*\x2\x2\x92\x93\x3\x2\x2\x2\x93\xBC\b\x3\x14\x2\x94\x95\ao\x2\x2\x95"+
		"\x96\aq\x2\x2\x96\x97\ap\x2\x2\x97\x98\av\x2\x2\x98\x99\aj\x2\x2\x99\x9A"+
		"\a*\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\xBC\b\x3\x15\x2\x9C\x9D\a\x66\x2\x2"+
		"\x9D\x9E\a\x63\x2\x2\x9E\x9F\a{\x2\x2\x9F\xA0\a*\x2\x2\xA0\xA1\x3\x2\x2"+
		"\x2\xA1\xBC\b\x3\x16\x2\xA2\xA3\aj\x2\x2\xA3\xA4\aq\x2\x2\xA4\xA5\aw\x2"+
		"\x2\xA5\xA6\at\x2\x2\xA6\xA7\a*\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xBC\b\x3"+
		"\x17\x2\xA9\xAA\ao\x2\x2\xAA\xAB\ak\x2\x2\xAB\xAC\ap\x2\x2\xAC\xAD\aw"+
		"\x2\x2\xAD\xAE\av\x2\x2\xAE\xAF\ag\x2\x2\xAF\xB0\a*\x2\x2\xB0\xB1\x3\x2"+
		"\x2\x2\xB1\xBC\b\x3\x18\x2\xB2\xB3\au\x2\x2\xB3\xB4\ag\x2\x2\xB4\xB5\a"+
		"\x65\x2\x2\xB5\xB6\aq\x2\x2\xB6\xB7\ap\x2\x2\xB7\xB8\a\x66\x2\x2\xB8\xB9"+
		"\a*\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\b\x3\x19\x2\xBB\x46\x3\x2\x2\x2"+
		"\xBBQ\x3\x2\x2\x2\xBB[\x3\x2\x2\x2\xBB\x64\x3\x2\x2\x2\xBBm\x3\x2\x2\x2"+
		"\xBBz\x3\x2\x2\x2\xBB\x84\x3\x2\x2\x2\xBB\x8D\x3\x2\x2\x2\xBB\x94\x3\x2"+
		"\x2\x2\xBB\x9C\x3\x2\x2\x2\xBB\xA2\x3\x2\x2\x2\xBB\xA9\x3\x2\x2\x2\xBB"+
		"\xB2\x3\x2\x2\x2\xBC\x6\x3\x2\x2\x2\xBD\xBE\a]\x2\x2\xBE\xBF\a\x63\x2"+
		"\x2\xBF\xC0\a/\x2\x2\xC0\xC1\a|\x2\x2\xC1\xC2\a\x43\x2\x2\xC2\xC3\a/\x2"+
		"\x2\xC3\xC4\a\\\x2\x2\xC4\xC5\a_\x2\x2\xC5\xC6\a]\x2\x2\xC6\xC7\a\x63"+
		"\x2\x2\xC7\xC8\a/\x2\x2\xC8\xC9\a|\x2\x2\xC9\xCA\a\x43\x2\x2\xCA\xCB\a"+
		"/\x2\x2\xCB\xCC\a\\\x2\x2\xCC\xCD\a\x32\x2\x2\xCD\xCE\a/\x2\x2\xCE\xCF"+
		"\a;\x2\x2\xCF\xD0\a$\x2\x2\xD0\xD1\a\x30\x2\x2\xD1\xD2\a$\x2\x2\xD2\xD3"+
		"\a_\x2\x2\xD3\xD4\a,\x2\x2\xD4\xD5\a*\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7"+
		"\b\x4\x1A\x2\xD7\b\x3\x2\x2\x2\xD8\xDA\t\x2\x2\x2\xD9\xD8\x3\x2\x2\x2"+
		"\xDA\xDB\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD\x3"+
		"\x2\x2\x2\xDD\xDE\b\x5\x1B\x2\xDE\n\x3\x2\x2\x2\xDF\xE3\t\x3\x2\x2\xE0"+
		"\xE2\v\x2\x2\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE4\x3\x2"+
		"\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE6\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6"+
		"\xE7\t\x3\x2\x2\xE7\xE8\b\x6\x1C\x2\xE8\f\x3\x2\x2\x2\xE9\xED\t\x4\x2"+
		"\x2\xEA\xEC\t\x5\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB"+
		"\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xE\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2"+
		"\xF0\xF4\t\x6\x2\x2\xF1\xF3\t\a\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF6\x3\x2"+
		"\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6"+
		"\xF4\x3\x2\x2\x2\xF7\xF8\b\b\x1D\x2\xF8\x10\x3\x2\x2\x2\xF9\xFB\t\b\x2"+
		"\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFC\xFD"+
		"\x3\x2\x2\x2\xFD\x12\x3\x2\x2\x2\n\x2\x44\xBB\xDB\xE3\xED\xF4\xFC\x1E"+
		"\x3\x2\x2\x3\x2\x3\x3\x2\x4\x3\x2\x5\x3\x2\x6\x3\x2\a\x3\x2\b\x3\x2\t"+
		"\x3\x2\n\x3\x2\v\x3\x2\f\x3\x3\r\x3\x3\xE\x3\x3\xF\x3\x3\x10\x3\x3\x11"+
		"\x3\x3\x12\x3\x3\x13\x3\x3\x14\x3\x3\x15\x3\x3\x16\x3\x3\x17\x3\x3\x18"+
		"\x3\x3\x19\x3\x4\x1A\b\x2\x2\x3\x6\x1B\x3\b\x1C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
