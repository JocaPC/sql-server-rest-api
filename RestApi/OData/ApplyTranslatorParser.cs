//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\GitHub\sql-server-rest-api\RestApi\OData\ApplyTranslator.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ApplyTranslatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, OP=8, ID=9, WS=10;
	public const int
		RULE_apply = 0, RULE_columns = 1, RULE_ids = 2, RULE_aggregates = 3, RULE_aggregate = 4;
	public static readonly string[] ruleNames = {
		"apply", "columns", "ids", "aggregates", "aggregate"
	};

	private static readonly string[] _LiteralNames = {
		null, "'groupBy'", "'('", "','", "')'", "'aggregate('", "'with'", "'as'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "OP", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ApplyTranslator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ApplyTranslatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}



		public System.Collections.Generic.LinkedList<RestApi.OData.Aggregate> Aggregates =
	        new System.Collections.Generic.LinkedList<RestApi.OData.Aggregate>();
		private void AddAggregateExpression(string Method, string Column, string Alias){
	    var agg = new RestApi.OData.Aggregate() { AggregateMethod = Method, AggregateColumn = Column, AggregateColumnAlias = Alias };
			this.Aggregates.AddLast(agg);
		}
		public string GroupBy = null;
		

		public ApplyTranslatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ApplyTranslatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ApplyContext : ParserRuleContext {
		public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		public AggregatesContext aggregates() {
			return GetRuleContext<AggregatesContext>(0);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.EnterApply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.ExitApply(this);
		}
	}

	[RuleVersion(0)]
	public ApplyContext apply() {
		ApplyContext _localctx = new ApplyContext(Context, State);
		EnterRule(_localctx, 0, RULE_apply);
		try {
			State = 18;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; Match(T__0);
				State = 11; Match(T__1);
				State = 12; columns();
				State = 13; Match(T__2);
				State = 14; aggregates();
				State = 15; Match(T__3);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17; aggregates();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		public IdsContext list;
		public IdsContext ids() {
			return GetRuleContext<IdsContext>(0);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 2, RULE_columns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(T__1);
			State = 21; _localctx.list = ids();
			 this.GroupBy = _localctx.list.GetText(); 
			State = 23; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdsContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(ApplyTranslatorParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(ApplyTranslatorParser.ID, i);
		}
		public IdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ids; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.EnterIds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.ExitIds(this);
		}
	}

	[RuleVersion(0)]
	public IdsContext ids() {
		IdsContext _localctx = new IdsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ids);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(ID);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 26; Match(T__2);
				State = 27; Match(ID);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregatesContext : ParserRuleContext {
		public AggregateContext[] aggregate() {
			return GetRuleContexts<AggregateContext>();
		}
		public AggregateContext aggregate(int i) {
			return GetRuleContext<AggregateContext>(i);
		}
		public AggregatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregates; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.EnterAggregates(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.ExitAggregates(this);
		}
	}

	[RuleVersion(0)]
	public AggregatesContext aggregates() {
		AggregatesContext _localctx = new AggregatesContext(Context, State);
		EnterRule(_localctx, 6, RULE_aggregates);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; aggregate();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 34; Match(T__2);
				State = 35; aggregate();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		public IToken column;
		public IToken agg;
		public IToken alias;
		public ITerminalNode[] ID() { return GetTokens(ApplyTranslatorParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(ApplyTranslatorParser.ID, i);
		}
		public ITerminalNode OP() { return GetToken(ApplyTranslatorParser.OP, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplyTranslatorListener typedListener = listener as IApplyTranslatorListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 8, RULE_aggregate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(T__4);
			State = 42; _localctx.column = Match(ID);
			State = 43; Match(T__5);
			State = 44; _localctx.agg = Match(OP);
			State = 45; Match(T__6);
			State = 46; _localctx.alias = Match(ID);
			State = 47; Match(T__3);

					this.AddAggregateExpression(_localctx.agg.Text, _localctx.column.Text, _localctx.alias.Text);	
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\x35', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x15', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x1F', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\"', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\'', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '*', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', 
		'\b', '\n', '\x2', '\x2', '\x2', '\x32', '\x2', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x16', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\b', '#', '\x3', '\x2', '\x2', '\x2', '\n', 
		'+', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\a', '\x3', '\x2', '\x2', 
		'\r', '\xE', '\a', '\x4', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', 
		'\x2', '\xF', '\x10', '\a', '\x5', '\x2', '\x2', '\x10', '\x11', '\x5', 
		'\b', '\x5', '\x2', '\x11', '\x12', '\a', '\x6', '\x2', '\x2', '\x12', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x15', '\x5', '\b', '\x5', 
		'\x2', '\x14', '\f', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\x4', '\x2', '\x2', '\x17', '\x18', '\x5', '\x6', '\x4', 
		'\x2', '\x18', '\x19', '\b', '\x3', '\x1', '\x2', '\x19', '\x1A', '\a', 
		'\x6', '\x2', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		' ', '\a', '\v', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x5', '\x2', '\x2', 
		'\x1D', '\x1F', '\a', '\v', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', 
		'(', '\x5', '\n', '\x6', '\x2', '$', '%', '\a', '\x5', '\x2', '\x2', '%', 
		'\'', '\x5', '\n', '\x6', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', 
		'\'', '*', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '\t', '\x3', '\x2', 
		'\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\a', 
		'\x2', '\x2', ',', '-', '\a', '\v', '\x2', '\x2', '-', '.', '\a', '\b', 
		'\x2', '\x2', '.', '/', '\a', '\n', '\x2', '\x2', '/', '\x30', '\a', '\t', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\v', '\x2', '\x2', '\x31', '\x32', 
		'\a', '\x6', '\x2', '\x2', '\x32', '\x33', '\b', '\x6', '\x1', '\x2', 
		'\x33', '\v', '\x3', '\x2', '\x2', '\x2', '\x5', '\x14', ' ', '(',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
